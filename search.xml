<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Hexo设置多说shortname]]></title>
      <url>http://loveswift.site/2017/02/18/Hexo%E8%AE%BE%E7%BD%AE%E5%A4%9A%E8%AF%B4shortname/</url>
      <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>本来是很简单的问题，但是浪费我不少时间，所以有必要记录一下，防止下次出错。<br>刚开始配置多说<code>shortname</code>压根没有在意，因为上一个主题的这个是随便填的，而且成功了（黑人问号）。<br>所以这次也是随便写的，怎么都失败，还看了控制台、源代码，后来突然觉得这个<code>shortname</code>这个单词好奇怪,然后百度了一下。</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>比如我的多说二级域名是xxx.duoshuo.com，<code>shortname</code>就是<code>xxx</code>。<br>最后吐槽一下，<code>short</code>不是短的意思吗，短名字？，<em>are you sure？</em></p>
]]></content>
      
        
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 技术 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Node.js上传图片到七牛]]></title>
      <url>http://loveswift.site/2017/02/17/Node.js%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%88%B0%E4%B8%83%E7%89%9B/</url>
      <content type="html"><![CDATA[<h3 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h3><p>主题基于 <a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="external">Yilia</a> ，作者使用的是<a href="https://www.instagram.com/" target="_blank" rel="external">Instagram</a>拉取的相册，捣鼓了半天，翻墙申请账号，最后发现图片爬不下来，后来发现<a href="https://yq.aliyun.com/articles/8607" target="_blank" rel="external">一篇</a>七牛上传的node脚本，因为需要上传的图片太多，然后改成了自己需要的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">if (stats.isFile()) &#123;</div><div class="line">    var suffix = getFilenameSuffix(files[index]);</div><div class="line">    if(!(suffix==&apos;.js&apos;|| suffix == &apos;.DS_Store&apos;))&#123;</div><div class="line">      //要上传文件的本地路径</div><div class="line">      filePath = path+&apos;/&apos;+files[index];</div><div class="line">      console.log(&apos;抓取到文件: &apos;+files[index]);</div><div class="line">      //上传到七牛后保存的文件名</div><div class="line">      key = files[index];</div><div class="line">      //生成上传 Token</div><div class="line">      token = uptoken(bucket, key);</div><div class="line">      // 异步执行</div><div class="line">      uploadFile(token, key, filePath);</div><div class="line">      arr.push(files[index]);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>这是上传图片的主要代码，主要问题有在<code>photos</code>文件中如果新增了图片，会把以前的图片再次上传一遍，所以做了检查重复不会上传：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">* 判断数组中是否包含某元素</div><div class="line">*/</div><div class="line">function array_contain(array, obj)&#123;</div><div class="line"> for (var i = 0; i &lt; array.length; i++)&#123;</div><div class="line">     if (array[i] == obj)//如果要求数据类型也一致，这里可使用恒等号===</div><div class="line">         return true;</div><div class="line"> &#125;</div><div class="line"> return false;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后愉快的开始执行，因为<code>photos</code>文件里大约有1000多张图片，理所当然的电脑直接死机。因为执行了一千次异步方法，js又是<a href="http://m.blog.csdn.net/article/details?id=53522759" target="_blank" rel="external">单线程</a>，那就用同步上传的方法，js异步改成同步的话有嵌套或者回调，我用了<a href="http://caolan.github.io/async/" target="_blank" rel="external">async</a>库，用法很简单:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">async.series([</div><div class="line">    function(callback) &#123; ... &#125;,</div><div class="line">    function(callback) &#123; ... &#125;</div><div class="line">]);</div></pre></td></tr></table></figure></p>
<p>要求传入函数数组，而不是对象Object数组，所以我把上传图片方法改成了闭包:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">//构造上传函数</div><div class="line">function uploadFile(uptoken, key, localFile) &#123;</div><div class="line">   var extra = new qiniu.io.PutExtra();</div><div class="line">   return function(callback) &#123; qiniu.io.putFile(uptoken, key, localFile, extra, function(err, ret) &#123;</div><div class="line">     if(!err) &#123;</div><div class="line">       // 上传成功， 处理返回值</div><div class="line">       console.log(&apos;上传成功 : &apos;,ret.hash, ret.key);</div><div class="line">       callback();</div><div class="line">     &#125; else &#123;</div><div class="line">       // 上传失败， 处理返回代码</div><div class="line">       console.log(err);</div><div class="line">       callback();</div><div class="line">     &#125;</div><div class="line"> &#125;);</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当读取完图片之后执行上传：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">if (index == files.length) &#123;</div><div class="line">     // 执行上传</div><div class="line">     console.log(funArr.length);</div><div class="line">     async.series(funArr, function(err, result) &#123;</div><div class="line">       console.log(&quot;上传完成&quot;);</div><div class="line">       fs.writeFile(&quot;./ins.json&quot;, JSON.stringify(arr, null, &quot;\t&quot;));</div><div class="line">       return;</div><div class="line">     &#125;);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>修改过后的tool.js脚本代码:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div></pre></td><td class="code"><pre><div class="line">const fs = require(&quot;fs&quot;);</div><div class="line">    const path = &quot;../../photos&quot;;</div><div class="line">    var qiniu = require(&quot;qiniu&quot;);</div><div class="line">    var async = require(&quot;async&quot;);</div><div class="line"></div><div class="line"></div><div class="line">    //需要填写你的 Access Key 和 Secret Key</div><div class="line">    qiniu.conf.ACCESS_KEY = &apos;&apos;;</div><div class="line">    qiniu.conf.SECRET_KEY = &apos;&apos;;</div><div class="line"></div><div class="line">    //要上传的空间</div><div class="line">    bucket = &apos;hexo&apos;;</div><div class="line"></div><div class="line">    //构建上传策略函数</div><div class="line">    function uptoken(bucket, key) &#123;</div><div class="line">      var putPolicy = new qiniu.rs.PutPolicy(bucket+&quot;:&quot;+key);</div><div class="line">      return putPolicy.token();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    //构造上传函数</div><div class="line">    function uploadFile(uptoken, key, localFile) &#123;</div><div class="line">        var extra = new qiniu.io.PutExtra();</div><div class="line">        return function(callback) &#123; qiniu.io.putFile(uptoken, key, localFile, extra, function(err, ret) &#123;</div><div class="line">          if(!err) &#123;</div><div class="line">            // 上传成功， 处理返回值</div><div class="line">            console.log(&apos;上传成功 : &apos;,ret.hash, ret.key);</div><div class="line">            callback();</div><div class="line">          &#125; else &#123;</div><div class="line">            // 上传失败， 处理返回代码</div><div class="line">            console.log(err);</div><div class="line">            callback();</div><div class="line">          &#125;</div><div class="line">      &#125;);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 读取文件后缀名称，并转化成小写</div><div class="line">     * @param file_name</div><div class="line">     * @returns</div><div class="line">     */</div><div class="line">    function getFilenameSuffix(file_name) &#123;</div><div class="line">      if(file_name==&apos;.DS_Store&apos;)&#123;</div><div class="line">        return &apos;.DS_Store&apos;;</div><div class="line">      &#125;</div><div class="line">        if (file_name == null || file_name.length == 0)</div><div class="line">            return null;</div><div class="line">        var result = /\.[^\.]+/.exec(file_name);</div><div class="line">        return result == null ? null : (result + &quot;&quot;).toLowerCase();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 判断数组中是否包含某元素</div><div class="line">     */</div><div class="line">    function array_contain(array, obj)&#123;</div><div class="line">      for (var i = 0; i &lt; array.length; i++)&#123;</div><div class="line">          if (array[i] == obj)//如果要求数据类型也一致，这里可使用恒等号===</div><div class="line">              return true;</div><div class="line">      &#125;</div><div class="line">      return false;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /*</div><div class="line">    读取photos内的图片</div><div class="line">     */</div><div class="line">    fs.readdir(path, function (err, files) &#123;</div><div class="line">        if (err) &#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        // 读取json文件</div><div class="line">        var data = fs.readFileSync(&apos;ins.json&apos;, &apos;utf-8&apos;);</div><div class="line">        var arr = JSON.parse(data);</div><div class="line"></div><div class="line">        var funArr = new Array();</div><div class="line"></div><div class="line">        (function iterator(index) &#123;</div><div class="line">          if (index == files.length) &#123;</div><div class="line">                // 执行上传</div><div class="line">                console.log(funArr.length);</div><div class="line">                async.series(funArr, function(err, result) &#123;</div><div class="line">                  console.log(&quot;上传完成&quot;);</div><div class="line">                  fs.writeFile(&quot;./ins.json&quot;, JSON.stringify(arr, null, &quot;\t&quot;));</div><div class="line">                  return;</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">            fs.stat(path + &quot;/&quot; + files[index], function (err, stats) &#123;</div><div class="line">                if (err) &#123;</div><div class="line">                    return;</div><div class="line">                &#125;</div><div class="line">                if (stats.isFile() &amp;&amp; !array_contain(arr, files[index])) &#123;</div><div class="line">                  var suffix = getFilenameSuffix(files[index]);</div><div class="line">                  if(!(suffix==&apos;.js&apos;|| suffix == &apos;.DS_Store&apos;))&#123;</div><div class="line">                    //要上传文件的本地路径</div><div class="line">                    filePath = path+&apos;/&apos;+files[index];</div><div class="line">                    // console.log(&apos;抓取到文件: &apos;+files[index]);</div><div class="line">                    //上传到七牛后保存的文件名</div><div class="line">                    key = files[index];</div><div class="line">                    //生成上传 Token</div><div class="line">                    token = uptoken(bucket, key);</div><div class="line">                    // 异步执行</div><div class="line">                    funArr.push(uploadFile(token, key, filePath));</div><div class="line">                    arr.push(files[index]);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                    &#125; else &#123;</div><div class="line">                      console.log(&apos;不是文件或者已经上传过了: &apos;+files[index]);</div><div class="line">                    &#125;</div><div class="line">                iterator(index + 1);</div><div class="line">            &#125;)</div><div class="line">        &#125;(0));</div><div class="line"></div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<hr>
<p>刚刚把tool修改成了直接可以上传两个文件夹的图片，一个文章引用，一个是相册，附上一张效果图：<br><img src="http://od50s29vd.bkt.clouddn.com/QQ20170217-101138@2x.png" alt=""></p>
]]></content>
      
        
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> Node </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[秒速五厘米]]></title>
      <url>http://loveswift.site/2017/02/16/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/</url>
      <content type="html"><![CDATA[<p><img src="http://pic1.win4000.com/wallpaper/b/566a5bd61ba86.jpg" alt=""></p>
<hr>
<blockquote>
<p>在这几年里<br>我光顾着低头前行<br>只想着得到那无法得到的东西<br>但是又不知道那究竟是什么<br>而这个不知从何而来的想法<br>逐渐地变成一种压迫<br>让我只能靠不停工作来解脱<br>等我惊觉之时<br>逐渐僵硬的心只能感觉到痛苦<br>然后在一天早上<br>我发现曾经那刻骨铭心的感情<br>已然完全失却</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> 动漫 </tag>
            
            <tag> 生活 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[清晨 醒来的时候]]></title>
      <url>http://loveswift.site/2017/02/15/%E4%BD%A0%E7%9A%84%E5%90%8D%E5%AD%97/</url>
      <content type="html"><![CDATA[<p><img src="http://pic1.win4000.com/wallpaper/2/5835570118d7f.jpg" alt=""></p>
<hr>
<blockquote>
<p>清晨 醒来的时候<br>不知道自己为什么会哭<br>时常会有这样的情况<br>做过的梦总回想不起<br>只是<br>只是<br>一种有什么要消失的丧失感<br>即使醒来后 也一直存在<br>我一直在寻找 寻找着某个人<br>陷入这种情绪<br>应该是从那天开始的<br>那天 彗星划过天空的那天<br>那就像<br>就像梦幻一般的景色一般<br>那真是 无与伦比<br>美到极致的景色</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> 动漫 </tag>
            
            <tag> 生活 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
